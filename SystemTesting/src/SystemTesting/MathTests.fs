module SystemTesting.MathTests

open System
open Diagnostics
open Precision

let refTableSinX =
    [| { Input = -3.141592653589793238
         Output = 0 }
       { Input = 3.141592653589793238
         Output = 0 }
       { Input = 0; Output = 0 }
       { Input = -1.980178972189184705
         Output = -0.917366731335869517815085353888790023576601790034023255791022208329207 }
       { Input = 3.054525069643740487
         Output = 0.086957619164997496582615743019798967746841890514906184002599101538091 }
       { Input = 1.086970485805371700
         Output = 0.885221741900538559272075429983319559526944117797203913074755462845114 }
       { Input = 2.641530792209640488
         Output = 0.479479826155304798209951367606254396982233350750339094287968202329608 }
       { Input = -1.602757367730838656
         Output = -0.999489289407951573478453844716195585524302110967832803171811344497130 }
       { Input = 0.120932552417232664
         Output = 0.120638001193843219705110020728492991685797262599607933668881821068756 }
       { Input = 0.895519891829380299
         Output = 0.780534177837081816112569020824721291854568093695852302589388519326879 }
       { Input = -2.949439680459583712
         Output = -0.190972684367099218768029197195911262538402925084493397140256672313270 }
       { Input = 0.503627961923384326
         Output = 0.482606212617209464263999008171573117899524228441095779842774224225518 }
       { Input = -2.528819019434219939
         Output = -0.575138657376855041732163890801836369778531074662663197297007109447792 }
       { Input = -1.751958649112110855
         Output = -0.983634938183362555493150892239262244107789376588795611670603940034962 }
       { Input = 1.947592546574743899
         Output = 0.929848215207483943032722155935456092132577372068404175480345560354313 }
       { Input = 1.894204562555628080
         Output = 0.948157789969379084909086224345238571337294063982883486226633841066968 }
       { Input = 0.507425356398133243
         Output = 0.485928625291467153109494460243839877015541666373516405963355955426745 }
       { Input = -1.049757340382687865
         Output = -0.867302459656594852549820907450201155086718237517631210752207676190523 }
       { Input = -1.105406126779538090
         Output = -0.893646522982279028728058617603741066082503194431138593753976426322044 } |]

let refTableCosX =
    [| { Input = -1.570796326794896619
         Output = 0 }
       { Input = 1.570796326794896619
         Output = 0 }
       { Input = 0; Output = 1 }
       { Input = 0.208072336856456319
         Output = 0.978430937816387477248102570292246364378999020468068458971097843341180 }
       { Input = 0.675088834008283012
         Output = 0.780651435918642620809400723560211477763738877205387021374281911110632 }
       { Input = -0.649360937006398853
         Output = 0.796470388197960097328844883016591560580109899910365476752619186695158 }
       { Input = 0.390133363762819041
         Output = 0.924858348274675427445809760699324903800219286567403122024940342549265 }
       { Input = -0.188138252300037112
         Output = 0.982354140663335481830359331970627174904756614773823639001937622713535 }
       { Input = 0.442986346936877662
         Output = 0.903475627687927634454514957318468496493340523664390142064630365402663 }
       { Input = 0.112398563843224331
         Output = 0.993689928778741432913410074191544830779297929699686516751849675294918 }
       { Input = 0.524929410773476324
         Output = 0.865359319705350534313008389757968472863054384632312313657833212614387 }
       { Input = 1.320125892438205106
         Output = 0.248053495780160407692468071070965093565915026210044809604624709318974 }
       { Input = 0.310157986917311224
         Output = 0.952285362727283883185505025556855374044760621624723325610556183149260 }
       { Input = -0.512059907572585904
         Output = 0.871737056726822070557404540819763574221828980211554421761791178391164 }
       { Input = -0.019024769422439469
         Output = 0.999819034532558315713420675129207239252363966391577405851241620798968 }
       { Input = -1.188535161113987382
         Output = 0.373019383992923540083712639985839360268200818757685607903578873561327 }
       { Input = -1.287695642837729970
         Output = 0.279334244494834992843483526739369934553169740835814349988860879427578 }
       { Input = 0.140794903151348016
         Output = 0.990104760118359770996576344513837951249406493555781987399213139735929 }
       { Input = -1.561169615584349746
         Output = 0.009626562520955350208912506462712435006323009077835337480272238678485 } |]

let refTableArcSinX =
    [| { Input = 0; Output = 0 }
       { Input = 1
         Output = 1.57079632679489661923132169163975144209858469968755291048747229615390820 }
       { Input = 0.307293958335019157
         Output = 0.31234808998780550368494688635355987269549952968782884596351104311416574 }
       { Input = 0.370147297943510867
         Output = 0.37916757565850061059847811520129805736148573000635768089845144976637260 }
       { Input = 0.248485618794449969
         Output = 0.25111652400209270955704411677393828084368931052035998410889672644140320 }
       { Input = 0.067035381464994367
         Output = 0.06708568988673765274538799798675257070917655156857971953653616092879825 }
       { Input = 0.737810179297302415
         Output = 0.82982044114707095465067261186321307217465919578892529567717599056824297 }
       { Input = 0.155809553609185275
         Output = 0.15644696330495471023083842817817472720324984855729228626226143616346565 }
       { Input = 0.301281112549193486
         Output = 0.30603590899714265909301842483547697212401127459838263448098204594194647 }
       { Input = 0.570105060602097091
         Output = 0.60663372710649292015719932738392281691348150593229457170121638754674419 }
       { Input = 0.203965590848579431
         Output = 0.20540696935013139767036547522178516300483232354126681359761689317602328 }
       { Input = 0.777691050613692703
         Output = 0.89098453759088223212250762906500848111117240999298288157439297740035855 }
       { Input = 0.808304252291169090
         Output = 0.94126621673334667922259356094219879964690544180985435299259035461021061 }
       { Input = 0.197167432680066534
         Output = 0.19846779235970994841836150941560064266235330591407265580362130981617815 }
       { Input = 0.470300390494591658
         Output = 0.48963113051612299432953986768851488755724963531697523330619213630803819 }
       { Input = 0.986877470739855767
         Output = 1.40861537694986024126474446139211020550408390090131186822026815270909344 }
       { Input = 0.752587876225027208
         Output = 0.85198330750493896359177636813964949991957114078161931569484825917412546 }
       { Input = 0.423156465269428794
         Output = 0.43692623716706648420399396679546505269710883382357663318397328001932281 } |]

let refTableSqrtX =
    [| { Input = 0; Output = 0 }
       { Input = 1; Output = 1 }
       { Input = 0.748214140708608144
         Output = 0.86499372293017718984946019959885979208177693068271877892114853320073872 }
       { Input = 0.295610455166457786
         Output = 0.54370070366559006873032299574529326171064507194665174162115258405384736 }
       { Input = 0.074127153743553706
         Output = 0.27226302309265888631416233629900440004307122751842176968327763432225451 }
       { Input = 0.001595712034403279
         Output = 0.03994636447041556496492642282447894689435970838650463355066810309142590 }
       { Input = 0.356969093521351255
         Output = 0.59746890590335431697817895476659808917220187339255989422386088479560546 }
       { Input = 0.853139722918425658
         Output = 0.92365563004748997090925797889795671515205333230235590320249548049293593 }
       { Input = 0.927537194669138865
         Output = 0.96308732452936938495089571663634022846289760666137383585821049973342001 }
       { Input = 0.127922274434920935
         Output = 0.35766223512543358118906014316843859318873347702001499289862614031656062 }
       { Input = 0.824461576022315179
         Output = 0.90799866520954488625602271157741762985557399267299227097349184715016139 }
       { Input = 0.453623607394663508
         Output = 0.67351585534021655131210882794533116146327550886450346196181629722363426 }
       { Input = 0.772190216875679347
         Output = 0.87874354442902130887003177603740369222489828657022283415216647106370672 }
       { Input = 0.564153768253548460
         Output = 0.75110170300269487539691594711148930594057884957418089440646797040443379 }
       { Input = 0.956991909294620080
         Output = 0.97825963286574391901846741371136601124675369605279184664817479599190955 }
       { Input = 0.505690656254461635
         Output = 0.71111929818734467740805282705664431333275750249760190797796391338997076 }
       { Input = 0.129707999324823742
         Output = 0.36014996782565973457146811665176803598744277714218474293903671269080010 }
       { Input = 0.051231188245869981
         Output = 0.22634307642574353990563961017436878164407501492708325367084901372998301 } |]

let printResults testsName (results: PrecisionResult[]) =
    results
    |> Array.iter (fun result -> printfn $"{testsName} = {{ Name = {result.Name}; Min = %0.16f{result.Min}; Max = %0.16f{result.Max} }}")

let testSin () =
    let inspectFn hasToPrint name (sample: Sample) (result: double) (diff: double) =
        if hasToPrint then
            printfn $"f(%+0.16f{sample.Input}) = %+0.16f{sample.Output} [reference]"
            printfn $"                         %+0.16f{result} (%0.16f{diff}) [{name}]"

    let referenceTests =
        [| { Name = "Sin"
             Fn = Math.Sin
             Samples = refTableSinX }
           { Name = "Cos"
             Fn = Math.Cos
             Samples = refTableCosX }
           { Name = "ASin"
             Fn = Math.Asin
             Samples = refTableArcSinX }
           { Name = "Sqrt"
             Fn = Math.Sqrt
             Samples = refTableSqrtX } |]

    let results = referenceTests |> Array.map (compareSamples (inspectFn true))

    printResults "Reference Function compared to Table Results" results

    let tests =
        [| { Name = "SinCustom"
             ReferenceFn = Math.Sin
             Fn = CustomMath.sin
             Range = (-CustomMath.Pi64, CustomMath.Pi64) }
           { Name = "CosCustom"
             ReferenceFn = Math.Cos
             Fn = CustomMath.cos
             Range = (-CustomMath.HalfPi, CustomMath.HalfPi) }
           { Name = "AsinCustom"
             ReferenceFn = Math.Asin
             Fn = CustomMath.asin
             Range = (0, 1) }
           { Name = "SqrtCustom"
             ReferenceFn = Math.Sqrt
             Fn = CustomMath.sqrt
             Range = (0, 1) } |]

    let results = tests |> Array.map (compare (inspectFn false) 1000_000)

    printResults "Custom function compared to Reference function Results" results
